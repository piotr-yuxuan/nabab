DependencyName,DependencyPath,Description,License,Md5,Sha1,Identifiers,CPE,CVE,CWE,Vulnerability,Source,CVSSv2_Severity,CVSSv2_Score,CVSSv2,CVSSv3_BaseSeverity,CVSSv3_BaseScore,CVSSv3,CPE Confidence,Evidence Count,VendorProject,Product,Name,DateAdded,ShortDescription,RequiredAction,DueDate,Notes
jackson-databind-2.14.2.jar,/home/runner/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.jar,General data-binding functionality for Jackson: works on core streaming API,"The Apache Software License, Version 2.0: https://www.apache.org/licenses/LICENSE-2.0.txt",c1b12dd14734cd1986132bf55042dd7e,01e71fddbc80bb86f71a6345ac1e8ab8a00e7134,pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.14.2,"cpe:2.3:a:fasterxml:jackson-databind:2.14.2:*:*:*:*:*:*:*, cpe:2.3:a:fasterxml:jackson-modules-java8:2.14.2:*:*:*:*:*:*:*",CVE-2023-35116,CWE-770 Allocation of Resources Without Limits or Throttling,"** DISPUTED ** jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.",NVD,,,,MEDIUM,4.7,CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H,HIGH,40,,,,,,,,
snappy-java-1.1.10.0.jar,/home/runner/.m2/repository/org/xerial/snappy/snappy-java/1.1.10.0/snappy-java-1.1.10.0.jar,snappy-java: A fast compression/decompression library,Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0.html,b62ca773e926e369f28deb64e1c2e081,356b22f323f71e124d1f2556eebe2c776509ea9d,pkg:maven/org.xerial.snappy/snappy-java@1.1.10.0,cpe:2.3:a:xerial:snappy-java:1.1.10.0:*:*:*:*:*:*:*,CVE-2023-34453,CWE-190 Integer Overflow or Wraparound,"snappy-java is a fast compressor/decompressor for Java. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing a fatal error.  The function `shuffle(int[] input)` in the file `BitShuffle.java` receives an array of integers and applies a bit shuffle on it. It does so by multiplying the length by 4 and passing it to the natively compiled shuffle function. Since the length is not tested, the multiplication by four can cause an integer overflow and become a smaller value than the true size, or even zero or negative. In the case of a negative value, a `java.lang.NegativeArraySizeException` exception will raise, which can crash the program. In a case of a value that is zero or too small, the code that afterwards references the shuffled array will assume a bigger size of the array, which might cause exceptions such as `java.lang.ArrayIndexOutOfBoundsException`.  The same issue exists also when using the `shuffle` functions that receive a double, float, long and short, each using a different multiplier that may cause the same issue.  Version 1.1.10.1 contains a patch for this vulnerability.",NVD,,,,HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,HIGH,43,,,,,,,,
snappy-java-1.1.10.0.jar,/home/runner/.m2/repository/org/xerial/snappy/snappy-java/1.1.10.0/snappy-java-1.1.10.0.jar,snappy-java: A fast compression/decompression library,Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0.html,b62ca773e926e369f28deb64e1c2e081,356b22f323f71e124d1f2556eebe2c776509ea9d,pkg:maven/org.xerial.snappy/snappy-java@1.1.10.0,cpe:2.3:a:xerial:snappy-java:1.1.10.0:*:*:*:*:*:*:*,CVE-2023-34454,CWE-190 Integer Overflow or Wraparound,"snappy-java is a fast compressor/decompressor for Java. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing an unrecoverable fatal error.  The function `compress(char[] input)` in the file `Snappy.java` receives an array of characters and compresses it. It does so by multiplying the length by 2 and passing it to the rawCompress` function.  Since the length is not tested, the multiplication by two can cause an integer overflow and become negative. The rawCompress function then uses the received length and passes it to the natively compiled maxCompressedLength function, using the returned value to allocate a byte array.  Since the maxCompressedLength function treats the length as an unsigned integer, it doesn’t care that it is negative, and it returns a valid value, which is casted to a signed integer by the Java engine. If the result is negative, a `java.lang.NegativeArraySizeException` exception will be raised while trying to allocate the array `buf`. On the other side, if the result is positive, the `buf` array will successfully be allocated, but its size might be too small to use for the compression, causing a fatal Access Violation error.  The same issue exists also when using the `compress` functions that receive double, float, int, long and short, each using a different multiplier that may cause the same issue. The issue most likely won’t occur when using a byte array, since creating a byte array of size 0x80000000 (or any other negative value) is impossible in the first place.  Version 1.1.10.1 contains a patch for this issue.",NVD,,,,HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,HIGH,43,,,,,,,,
snappy-java-1.1.10.0.jar,/home/runner/.m2/repository/org/xerial/snappy/snappy-java/1.1.10.0/snappy-java-1.1.10.0.jar,snappy-java: A fast compression/decompression library,Apache-2.0: https://www.apache.org/licenses/LICENSE-2.0.html,b62ca773e926e369f28deb64e1c2e081,356b22f323f71e124d1f2556eebe2c776509ea9d,pkg:maven/org.xerial.snappy/snappy-java@1.1.10.0,cpe:2.3:a:xerial:snappy-java:1.1.10.0:*:*:*:*:*:*:*,CVE-2023-34455,CWE-770 Allocation of Resources Without Limits or Throttling,"snappy-java is a fast compressor/decompressor for Java. Due to use of an unchecked chunk length, an unrecoverable fatal error can occur in versions prior to 1.1.10.1.  The code in the function hasNextChunk in the fileSnappyInputStream.java checks if a given stream has more chunks to read. It does that by attempting to read 4 bytes. If it wasn’t possible to read the 4 bytes, the function returns false. Otherwise, if 4 bytes were available, the code treats them as the length of the next chunk.  In the case that the `compressed` variable is null, a byte array is allocated with the size given by the input data. Since the code doesn’t test the legality of the `chunkSize` variable, it is possible to pass a negative number (such as 0xFFFFFFFF which is -1), which will cause the code to raise a `java.lang.NegativeArraySizeException` exception. A worse case would happen when passing a huge positive value (such as 0x7FFFFFFF), which would raise the fatal `java.lang.OutOfMemoryError` error.  Version 1.1.10.1 contains a patch for this issue.",NVD,,,,HIGH,7.5,CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H,HIGH,43,,,,,,,,
